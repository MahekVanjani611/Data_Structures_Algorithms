vector<int> topoSort(int V, vector<int> adj[]) {
    vector<int> ans;        // To store the topological order
    vector<int> Indeg(V, 0); // To store the in-degree of each vertex

    // Compute in-degree of each vertex
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < adj[i].size(); j++) {
            Indeg[adj[i][j]]++;
        }
    }

    queue<int> q;
    // Initialize the queue with all vertices with in-degree 0
    for (int i = 0; i < V; i++) {
        if (Indeg[i] == 0) {
            q.push(i);
        }
    }

    // Process nodes in the queue
    while (!q.empty()) {
        int node = q.front();
        q.pop();
        ans.push_back(node);

        // Reduce in-degree of adjacent vertices
        for (int j = 0; j < adj[node].size(); j++) {
            Indeg[adj[node][j]]--;
            if (Indeg[adj[node][j]] == 0) {
                q.push(adj[node][j]);
            }
        }
    }

    return ans;
}
//Time Complexity-O(V+E)
//Space Complexity -O(V)
